#######################
Day 7 : 12th Dec. 2024
#######################	
		

Module 5: Managing Source Code â€“ Git and GitHub

	Continous Development ::
	
	Using DevOps Approach :			
	
			- Developers Create Application Source Code.
			- Save the Source Code in the Source Code Repository(GITHUB)
			
	Developer :

		Develop a Web Page :
		
	index.html 
	
	<html>
	---
	---
	---
	--
	-
	---
	--
	</html>
	
	Project Folder/Workspace Directory
	
	java_web_app_proj1 Folder 
		src 
			main
				*.java 
				*.java 
			test 
				*.java 
				*.java
		target
			*.war 
		app.properties
		resources
			index.html 
			*.css 
			*.js
	
	create index.html 
	
	<html>
	---
	---
	---
	--
	-
	---
	--
	</html>
	
		save as index.html & test the changes 
	
	Edit index.html 
	
	<html>
	---
	---
	---
	--
	-------
	----------
	--
	-----
	---
	</html>
	
		save as index.html & test the changes
		
	Edit index.html 
	
	<html>
	---
	-------
	---
	--asdfasdf
	-----------asdfasdfasdf
	----------asdfasdfasdf
	--asdfasdfsdf
	---------
	-------
	</html>
	
		save as index.html & test the changes
		
		
	Using Version Control System :
	
		Version Control System 
			- Is used to Version Control the Source Code Changes
			- Is used to Track the Source Code Changes 
	
	create index.html 
	
	<html>
	---
	---
	---
	--
	-
	---
	--
	</html>
	
		save as index.html			---> 	index.html_v1.0		# v1.0 considered as a Tag/Version_number/Commit_ID
		Unit Test the Changes 

	Edit index.html 
	
	<html>
	---
	---
	---
	--
	-------
	----------
	--
	-----
	---
	</html>
	
		save as index.html			---> 	index.html_v1.1		# v1.1 considered as a Tag/Version_number/Commit_ID
		Unit Test the Changes 

		save as index.html			---> 	index.html_v1.2	
		save as index.html			---> 	index.html_v1.3	
		save as index.html			---> 	index.html_v1.4	
		save as index.html			---> 	index.html_v1.5	
		save as index.html			---> 	index.html_v1.6	
		
		
	Working with Version Control System :
	
	Type of VCS :
	
		1. Local VCS 
		2. Centralized VCS 
		3. Distributed VCS 
		
	GIT :
	
		- Is an Open-Source Distributed Version Control System
		- It is used to Version Control the Source Code Changes
		- Used to Track the Changes 
		- Used to Perform Parallel Development using Branching Techniques
		
	Remote GIT Repository Servers :
	
		Github 
		gitlab
		bamboo
		Azure Repo 
		AWS Code Commit 
		Bitbucket 
		
	Working with GIT :
	
		- Git Client  	- To be Installed in the local Machine 
		
		- GitHub		- Should have access to Remote github server
		
		- Git File Workflow :
		
		- Git Branching Strategies :
		
		- Handling Remote Git Repository(Github) :
	
	
	- Git File Workflow :
	
	In Distributed VCS :
	
	Local Machine																					Remote Server
	
	Working Directory 				Staging Area				Local Repository					   Remote Repository
	
		index.html	 --------------> index.html	 --------------> Index.html_v1.0	-----------------> 	Index.html_v1.0
						git add 				   git commit 						  	 git push
			
		index.html	 --------------> index.html	 --------------> Index.html_v1.1	----------------->	Index.html_v1.1
						git add 				   git commit                         	 git push                      
	                                                                                                    
		index.html	 --------------> index.html	 --------------> Index.html_v1.2	----------------->  Index.html_v1.2
						git add 				   git commit                         	 git push                      
                                                                                                        
		index.html	 --------------> index.html	 --------------> Index.html_v1.3	----------------->  Index.html_v1.3
						git add 				   git commit 						  	 git push
						
						
	In Local Machine :
	
		Working Directory 		# Is Physical Memory Location of the File c:/folder/index.html
		
		Staging Area			# Logical Location - used by git to stage the changes 
								# Stagins Area acts as an interface between Working Directory & Local Repository
						
		Local Repository		# Logical Location - used by git to create permanent commit point 
								# Stagins Area acts as an interface between Working Directory & Local Repository

	
	Developers' Workload :
	
		- Enhancement Project / Bug fix 	# Project Source is already present in Remote Repository
		
		- New Project 						# Create from the Local Machine & Push it to Remote Repository
		
		
	Git CLI Commands :
	
		
		- git clone 				# Used to clone/copy the entire Remote Repository to Local Machine(Working Dir & Local Repo)

		- git add					# Used to add the changes from Working Directory to the Staging Area

		- git commit 				# Used to Permanently commit the Changes from Staging to Local Repository
		
		- git push					# Used to Push the changes from Local Repository to Remote Repository
		
		- git pull / git fetch		# Both git pull and git fetch are used to handle the incremental changes from Remote Repository 
		
			- git fetch 
			
				# git fetch will just check for the incremental changes in the remote repository. If their is any incremental changes exist, it will update the details only in the local repository. git fetch will NEVER Update the Working Directory.
				
				# Upon git fetch, to work on the changes, we can use git pull or git merge
				
				# Using git merge the changes can be updated in the working directory
				
			- git pull  			
			
				# git pull will check for the incremental changes in the remote repository. If their is any incremental changes exist, it will update the details in the local repository as well in the Working Directory.	

				git pull = git fetch + git merge 
				
	
	
	
		- GIT Fork				# Used to copy one remote repository to an another remote repository					
	
	
	Install GIT Client in the local Machine (Windows/Linux/Mac)
	
		https://git-scm.com/downloads
		
		
		https://git-scm.com/downloads/win
		
		Windows Users Choose :
		
		Standalone Installer	-		64-bit Git for Windows Setup.
		
		download exec file and execute it. 
		Leave all the options as default one and click Next till the end and install it.
		
		for Windows Users :
			- GIT BASH 			* Working with git bash 
			
			- GIT CMD 
			
			- GIT GUI
			
Next :

	Working with GIT Local Repositories using git cli commands. 	
	


#######################
Day 8 : 13th Dec. 2024
#######################	
		
	Working with GIT Local Repositories using git cli commands ::::::
	
		- Git File Workflow :
		
		In Distributed VCS :
		
		Local Machine																					Remote Server
		
		Working Directory 				Staging Area				Local Repository					   Remote Repository
		
			index.html	 --------------> index.html	 --------------> Index.html_v1.0	-----------------> 	Index.html_v1.0
							git add 				   git commit 						  	 git push
		
		
		
	Local Machine :

		- Install Git Client
		
		- Work with GIT CLI Commands 
		
		for Windows Users :
			- GIT BASH 			* Working with git bash 
			
		for Linux / Mac Users :
			- Open Linux/Mac Terminal and execute Git Cli Commands

	
	Open git bash/Terminal 
	
		Create the Directory 
		
			d:/SA-Dec03-DevOps
			
			cd d:
			
			mkdir SA-Dec03-DevOps
			
			cd SA-Dec03-DevOps
			
			mkdir repo1
			
			mkdir repo2 
			
			cd repo1	
			
			# execute git cli commands 
		
		
		Create New Project 		# Create from the Local Machine & Push it to Remote Repository
		
		
		git init 				# Is used to initialize the local git repository
								# Create a .GIT! Directory 
								# Create a default branch called master/main 
		
				
		git config :			# To assign the defauld Author Name and Email ID 
								# git config should be executed to set the user name and Email ID before the very initial commit.
								
			GIT Local Configuration :	
				# It is applicable to a specific repository
				
				git config user.name "Loksai"				
				git config user.email "loksai@asdfa.com"
			
			
			GIT Global Configuration :
				# It is applicable to all the repositories 
				
				git config --global user.name "Loksai"				
				git config --global user.email "loksai@asdfa.com"
				
				
		git status 				# Used to get the status of git repository


		echo "rec1" >> file1.txt
		
		git add file1.txt 
		
		git commit -m "Created file1.txt"
		
		git log 
		
		
		git add :::::		
		
			git add <file_name>
			
			git add *.txt 
			
			git add fi1e1.txt file2.txt file3.txt 
			
			git add .
		
		
		ls 						# Linux Bash Command to get the list of files and folder from Working Directory
		
		git ls-files			# Is git command to get the list of files and folders that being tracked by git.
		
		
		Unstaging 				# Remove the Changes from Staging Area.
			
			git rm --cached <file_name>	
								# Used to Remove the Changes from Staging Area.
								# But, the Changes will be take back to working Directory.
								# The Changes that are remove, will be considered as Untracked Changes.
								
			git rm -rf <file_name> 
								# Used to Permanently pemove the Changes from Staging Area as well as from the working directory.
		
		
		
		git log ::::
		
		
			git log 
			
			git log --oneline	
			
			git log -2
			
			git log --oneline -3
			
			git log --stat 
			
			git log --stat -1
			
		git show <commit_id>
		
		
		git commit :::::
		
		
			# Used to Create a permanent commit point 
			
			git commit -m "<Commit Message>"
			
			<Commit Message> ???
			
			Eg.: 
			
				git commit -m "CR2412 - Upated payment function"
			
			
			git commit --amend -m "Valid Message"			
					# Used to Update the Commit Message of latest commit,  Without creating New Commit Point.
					
					
		
		git diff 		# Used to compare the changes between the working directory and Local Repository
						# To Compare the Changes between Commited and Uncommited Changes.


  501  cd d:
  502  cd c:
  503  cd d:
  504  pwd
  505  mkdir SA-Dec03-DevOps
  506  cd SA-Dec03-DevOps/
  507  pwd
  508  ls
  509  clear
  510  ls
  511  mkdir repo1
  512  ls
  513  cd repo1/
  514  clear
  515  pwd
  516  ls
  517  ls -a
  518  git init
  519  ls -a
  520  cd .git/
  521  pwd
  522  ls
  523  cd ..
  524  clear
  525  git status
  526  echo "record1" >> file1.txt
  527  ls
  528  git status
  529  git add file1.txt
  530  git status
  531  ls
  532  git commit -m "Created file1.txt"
  533  git status
  534  git log
  535  clear
  536  ls
  537  git status
  538  clear
  539  echo "rec1" >> file2.txt
  540  ls
  541  git status
  542  git add file2.txt
  543  git status
  544  git commit -m "Created file2.txt"
  545  git status
  546  git log
  547  cat file1.txt
  548  clear
  549  ls
  550  git status
  551  git log
  552  cd ..
  553  ls
  554  mkdir repo2
  555  cd repo2/
  556  git init
  557  ls
  558  git log
  559  git status
  560  echo "rec1" >> a1.txt
  561  git status
  562  git add a1.txt
  563  git commit -m "Created a1.txt"
  564  ls
  565  git status
  566  git log
  567  git config user.name "Loksai"
  568  echo "rec1" >> a1.txt
  569  git add a1.txt
  570  git commit -m "updatred a1.txt"
  571  git log
  572  cd ..
  573  cd repo1
  574  ls
  575  git log
  576  echo "rec1" >> q1.txt
  577  git add q1.txt
  578  git commit -m "Created q1.txt"
  579  git log
  580  clear
  581  cd ..
  582  ls
  583  cd repo1/
  584  cd .git/
  585  ls
  586  cd ..
  587  clear
  588  ls
  589  cd ..
  590  clear
  591  mkdir repo3
  592  cd repo3/
  593  clear
  594  ls -a
  595  git init
  596  ls -a
  597  clear
  598  git status
  599  ls
  600  echo "rec1" >> f1.txt
  601  git status
  602  git add f1.txt
  603  git status
  604  git commit -m "Created f1.txt"
  605  git log
  606  git status
  607  clear
  608  clear
  609  ls
  610  git status
  611  git log
  612  echo "rec1" >> s1.txt
  613  ls
  614  git status
  615  echo "rec1" >> s2.txt
  616  echo "rec1" >> s3.txt
  617  echo "rec1" >> s4.txt
  618  echo "rec1" >> l1.java
  619  echo "rec1" >> l2.java
  620  echo "rec1" >> l3.java
  621  echo "rec1" >> e1.temp
  622  echo "rec1" >> e2.temp
  623  echo "rec1" >> s1.txt
  624  echo "rec1" >> s2.txt
  625  echo "rec1" >> s3.txt
  626  echo "rec1" >> j1.doc
  627  echo "rec1" >> j2.doc
  628  clear
  629  ls
  630  git status
  631  git add e1.temp j1.doc
  632  git status
  633  git add *.java
  634  git status
  635  git add *.temp *.doc
  636  git status
  637  git add .
  638  git status
  639  git status
  640  ls
  641  git ls-files
  642  git rm --cached e1.temp
  643  git status
  644  git ls-files
  645  git rm -rf s4.txt
  646  ls
  647  git ls-files
  648  git status
  649  git commit -m "Created some dummy files"
  650  git status
  651  clear
  652  git log
  653  clear
  654  git log
  655  cd ..
  656  cd repo2/
  657  ls
  658  git log
  659  cd ..
  660  cd repo1/
  661  clear
  662  git log
  663  clear
  664  git log
  665  echo "rec1" >> q1.txt
  666  git add .
  667  git commit -m "updated q1.txt"
  668  echo "rec1" >> q1.txt
  669  git add .
  670  git commit -m "updated q1.txt"
  671  echo "rec1" >> q1.txt
  672  git add .
  673  git commit -m "updated q1.txt"
  674  echo "rec1" >> q1.txt
  675  git add .
  676  git commit -m "updated q1.txt"
  677  clear
  678  git log
  679  clear
  680  git log
  681  clear
  682  git log
  683  clear
  684  git log --oneline
  685  git log -1
  686  git log -2
  687  git log --oneline
  688  git log --oneline -3
  689  clear
  690  git log -1
  691  git log --stat -1
  692  git log -1
  693  clear
  694  git log --oneline -3
  695  git show 93dc0a9
  696  git log --stat -1
  697  clear
  698  git log --oneline
  699  git show 899f136
  700  cat file1.txt
  701  clear
  702  git log --oneline
  703  echo "rec1" >> l1.txt
  704  git add .
  705  git commit -m "CR2412 - Upated payment function"
  706  clear
  707  git log --oneline
  708  echo "rec1" >> d1.txt
  709  git add .
  710  git commit -m "asdfasdfasdfasdfasdf"
  711  clear
  712  git log --oneline
  713  git commit -m "Valid Message"
  714  git log --oneline
  715  git commit --amend -m "Valid Message"
  716  git log --oneline
  717  clear
  718  ls
  719  cat q1.txt
  720  git status
  721  vi q1.txt
  722  cat q1.txt
  723  git status
  724  git diff
  725  git add .
  726  git commit -m "updated q1.txt"
  727  git diff
  728  cd ..
  729  clear
  730  history



#######################
Day 9 : 17th Dec. 2024
#######################	

	- git reset 
	
	- git revert 
	
	- git Branching Techniques
	
	- git stash 
	
	- Remote Repository(Github)
	
	

- GIT Reset :::

		Local Machine																
		
		Working Directory 				Staging Area				Local Repository
		
			index.html	 --------------> index.html	 --------------> Index.html_v1.0
							git add 				   git commit 					
		
		
	GIT Reset :::
	
	HEAD Pointer ::
	
	
	git reset :::
	
		git reset is used to undo the changes from the repository
		git reset will reset the commit point to the previous commit point 
		git reset will not create any new commit point for track purpose 
		git reset is not recommended in the shared repository 
	
		Syntax :		
			- git reset <reset_option> <previous_Commit_ID>
			
		Reset Options ::
		
			git reset --soft <previous_Commit_ID> :::
				- git reset will reset the HEAD pointer to the previous commit point.
				- It will take the changes back to staging area 
				- The Changes will be available in staging area and working directory					
		
			git reset --mixed <previous_Commit_ID> :::
				- git reset will reset the HEAD pointer to the previous commit point.
				- It will take the changes back to working directory 
				- The Changes will be available only in working directory			
			
			git reset --hard  <previous_Commit_ID> :::
				- git reset will reset the HEAD pointer to the previous commit point.
				- It will permanently delete the files from the system 
				

- GIT Revert :::
	
		- Git Revert is same as git reset --hard option 		
		- git revert is used to undo a specific commit 		
		- git revert will create a new commit point for tracking purpose.		
		- git revert will maintain the commit history		
		- git revert is recommended in shared repositories
		
		Syntax ::
			git revert <specific_Commit_ID>
					
				
				
	- GIT Branching Techniques :::

		Repo1 :
		
			master - Branch 
		
	- GIT Branching Strategies :::
	
		- The master is considered as a production version of source code.
		- GIT Branching Strategies are used to maintain the integrity/correctness of master branch.
		- GIT Branches are the logical copy of a repository(master branch)
		- GIT Branching Strategies prevent the conflict in master branch
		- To Perform Parallel Development 
		
		
		
	Scenario 0 :
		
		Repo1 :
		
			master : cm1,cm2,cm3
						cm1,cm2,cm3,f1cm1,f1cm2,f1cm3			# Upon Merging feature1.
			
			feature1 : cm1,cm2,cm3
						cm1,cm2,cm3,f1cm1,f1cm2,f1cm3


	Scenario 1 :::		Independent Developer.
	
		Repo1 : 
			master : cm1,cm2,cm3,cm4,cm5
			

	Scenario 2 :::		Independent Developer.
	
		Repo1 : 
			master : cm1,cm2,cm3,cm4,cm5
						cm1,cm2,cm3,cm4,cm5,f1cm1,f1cm2,f1cm3		# Upon Merging feature1.
					
				feature1 : cm1,cm2,cm3,cm4,cm5,f1cm1,f1cm2,f1cm3
				
				
	Scenario 3 :::		Independent Developer. - Parallel Development :
	
		Repo1 : 
			master : cm1,cm2,cm3,cm4,cm5

						cm1,cm2,cm3,cm4,cm5,Developer_Branch1-Changes			# Upon Merging Developer_Branch1.
			
				Developer_Branch1 : cm1,cm2,cm3,cm4,cm5
				
							cm1,cm2,cm3,cm4,cm5,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3			# Upon Mergine feature1 & feature2	
			
					feature1 : cm1,cm2,cm3,cm4,cm5,f1cm1,f1cm2,f1cm3
					
					feature2 : cm1,cm2,cm3,cm4,cm5,f2cm1,f2cm2,f2cm3
					
					
	Create Branches :
	
	Working with Branches :
	
			git branch 							# Used get the list of branches 
			
			git branch <new_branch_name>		# Create New Branch 
			
			git switch -c <new_branch_name>		# Create New Branch 
			
			git switch <branch_name>			# Switch to any existing branch 
			
			git merge 							# Used to Merge the Changes to Target Branch
												# Should be executed from the target branch 
		
		
		Repo1:
			master : cm1 
			
		
		git switch feature1
		
		echo "rec" >> q1.txt 
		
		git add . 
		
		git commit -m "f1cm1"
		
		git switch master 
		
		git merge feature1 					# This Command should executed from target branch.
		
		
		
		GIT Merge Conflict :::
		
			How Merge Conflict Occurs ::
			
				- When more than one user/feature try to update a same line in the same file on the same target branch, merge Conflict Occurs.
				
			How to fix the Merge Conflict ::
			
				1. Identify the file(s) causing the Merge Conflict 
				2. Open and review the file content
				3. Upon review, decide which record should be retained or deleted from that file
				4. Open the File in edit mode, and delete the header and footer lines, and update the file with required records and save it.
				5. perform git add and commit to the target branch 	

			Prevent the Merge Conflict ::
		
				As per DevOps Process, review the Changes before merge 
	

	GIT IGNORE :
	
		- Is used Ignore the files from tracking!
		
		- create .gitignore file and commit in a repository as a very first commit.
		
		Project_Folder :	commit to local repo1			==> 	push to remote repo 	
		
			*.java 
			*.html 
			
			*.war
			DB_Username
			DB_Password
			secrets
			credentials
			
Commands>>>>>>>>>>>>
  501  cd d:
  502  ls
  503  cd SA-Dec03-DevOps/
  504  ls
  505  ll
  506  clear
  507  ls
  508  mkdir testrepo1
  509  cd testrepo1/
  510  clear
  511  git init
  512  clear
  513  ls
  514  git ls-files
  515  echo "rec1" >> s1.txt
  516  git add .
  517  git commit -m "CM1"
  518  echo "rec1" >> s2.txt
  519  git add .
  520  git commit -m "CM2"
  521  echo "rec1" >> s3.txt
  522  git add .
  523  git commit -m "CM3"
  524  echo "rec1" >> s4.txt
  525  git add .
  526  git commit -m "CM4"
  527  echo "rec1" >> s5.txt
  528  git add .
  529  git commit -m "CM5"
  530  clear
  531  git log --oneline
  532  ls
  533  git ls-files
  534  git status
  535  git reset --soft 611a525
  536  git status
  537  git ls-files
  538  ls
  539  git log --oneline
  540  git commit -m "CM5.1"
  541  git log --oneline
  542  ls
  543  git ls-files
  544  git status
  545  git reset --mixed 611a525
  546  ls
  547  git ls-files
  548  git log --oneline
  549  git status
  550  git add .
  551  git commit -m "CM5.2"
  552  git ls-files
  553  ls
  554  git log --oneline
  555  git status
  556  git reset --hard 611a525
  557  git log --oneline
  558  git ls-files
  559  ls
  560  git status
  561  git log --oneline
  562  git reset --hard b6fec43
  563  git log --oneline
  564  ls
  565  git ls-files
  566  git status
  567  git log --oneline
  568  git reset --hard 0c04180
  569  ls
  570  git log --oneline
  571  ls
  572  clear
  573  ls
  574  git log --oneline
  575  git status
  576  echo "rec1" >> f1.txt
  577  git add .
  578  git commit -m "CM2"
  579  echo "rec1" >> f2.txt
  580  git add .
  581  git commit -m "CM3"
  582  echo "rec1" >> f3.txt
  583  git add .
  584  git commit -m "CM4"
  585  echo "rec1" >> f4.txt
  586  git add .
  587  git commit -m "CM5"
  588  clear
  589  git log --oneline
  590  ls
  591  git ls-files
  592  git status
  593  git show 34c1e43
  594  git revert 34c1e43
  595  ls
  596  git ls-files
  597  git status
  598  git log --oneline
  599  git show a6c4448
  600  git revert a6c4448
  601  ls
  602  git ls-files
  603  git status
  604  git log --oneline
  605  git revert 153c5f9
  606  ls
  607  git log --oneline
  608  ls
  609  git revert 6c41f0e
  610  ls
  611  clear
  612  git branch
  613  cd ..
  614  mdkir testrepo2
  615  mkdir testrepo2
  616  cd testrepo2/
  617  clear
  618  git init
  619  git status
  620  ls
  621  git branch
  622  echo "rec1" >> f1.txt
  623  git add .
  624  git commit -m "CM1"
  625  git branch
  626  git branch feature1
  627  git branch
  628  git status
  629  git log --oneline
  630  git branch feature2
  631  git status
  632  git log --oneline
  633  git switch -c feature3
  634  git branch
  635  git switch master
  636  git branch
  637  git status
  638  git log --oneline
  639  ls
  640  git switch feature1
  641  ls
  642  git log --oneline
  643  echo "rec1" >> q1.txt
  644  git add .
  645  git commit -m "f1cm1"
  646  echo "rec1" >> q2.txt
  647  git add .
  648  git commit -m "f1cm2"
  649  ls
  650  git log --oneline
  651  ls
  652  git switch master
  653  ls
  654  git log --oneline
  655  git switch feature1
  656  clear
  657  ls
  658  git log --onelin
  659  git log --oneline
  660  git switch master
  661  git log --oneline
  662  ls
  663  git merge feature1
  664  ls
  665  git log --oneline
  666  clear
  667  cd ..
  668  mkdir testrepo3
  669  cd testrepo3/
  670  clear
  671  git init
  672  echo "rec1" >> f1.txt
  673  git add .
  674  git commit -m "cm1"
  675  clear
  676  ls
  677  git log --oneline
  678  git branch feature1
  679  git branch feature2
  680  git branch
  681  git switch feature1
  682  ls
  683  git log --oneline
  684  cat f1.txt
  685  echo "Record2 from feature1" >> f1.txt
  686  cat  f1.txt
  687  git status
  688  git add .
  689  git commit -m "f1cm1"
  690  git switch master
  691  ls
  692  cat
  693  cat f1.txt
  694  git merge feature1
  695  cat f1.txt
  696  git log --oneline
  697  git switch feature2
  698  cat
  699  cat f1.txt
  700  echo "Record2 from feature2" >> f1.txt
  701  cat  f1.txt
  702  git add .
  703  git commit -m "f2cm1"
  704  git switch master
  705  cat f1.txt
  706  git merge feature2
  707  clear
  708  git status
  709  cat f1.txt
  710  vi f1.txt
  711  git add .
  712  git commit -m "fixed Merge Conflicts!"
  713  cat f1.txt
  714  git log --oneline
  715  clear
  716  cd ..
  717  mkdir testrepo4
  718  cd testrepo4/
  719  git init
  720  ls
  721  ls -a
  722  vi .gitignore
  723  git add .
  724  git commit -m "Initial Commit for .gitignore"
  725  ls
  726  clear
  727  ls -a
  728  cat .gitignore
  729  ls
  730  echo "rec1" >> file1.txt
  731  git status
  732  echo "rec1" >> sample.txt
  733  ls
  734  git status
  735  git add .
  736  git commit -m "adfasD"
  737  git status
  738  git log --oneline
  739  git ls-files
  740  ls
  741  clear
  742  history



Next :::

	Git Branching Features 
	
		- git rebase 
		
		- git merge --squash 
		
		- git stash 
		
	Remote Repository Handling 
